name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Install playwright browsers
      run: |
        playwright install chromium
        
    - name: Run test suite
      run: |
        python run_tests.py
        
    - name: Generate coverage report (optional)
      continue-on-error: true
      run: |
        python -m pytest scraper_module/tests/ --cov=scraper_module --cov-report=xml || true

  # 배포는 main 브랜치에 푸시될 때만 실행
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy notification
      run: |
        echo "🚀 Deploying to production..."
        echo "📦 Version: ${{ github.sha }}"
        echo "✅ All tests passed, ready for deployment!"
        echo "🔄 You can add your deployment scripts here"
        
    - name: Create deployment artifact
      run: |
        echo "Creating deployment package..."
        tar -czf linkedin-matcher-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          .
        echo "📦 Artifact created: linkedin-matcher-${{ github.sha }}.tar.gz" 